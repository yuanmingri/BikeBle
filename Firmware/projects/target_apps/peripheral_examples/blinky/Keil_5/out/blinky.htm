<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Dec 01 02:44:19 2016
<BR><P>
<H3>Maximum Stack Usage =         64 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; periph_init &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[11]">BLE_CRYPT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[9]">BLE_CSCNT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[b]">BLE_ERROR_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[d]">BLE_EVENT_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[7]">BLE_FINETGTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[8]">BLE_GROSSTGTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[10]">BLE_RADIOCNTL_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[c]">BLE_RX_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[a]">BLE_SLP_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[19]">GPIO0_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1a]">GPIO1_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1b]">GPIO2_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1c]">GPIO3_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1d]">GPIO4_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from per_ex_hard_fault.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[14]">I2C_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[17]">KEYBRD_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[18]">RFCAL_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[15]">SPI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[e]">SWTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_armcm0.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[13]">UART2_Handler</a> from uart2.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[12]">UART_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[f]">WKUP_QUADEC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from boot_vectors.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[45]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[46]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[47]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[48]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[49]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BLE_CRYPT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BLE_CSCNT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BLE_ERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_EVENT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BLE_FINETGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_GROSSTGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BLE_RADIOCNTL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BLE_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BLE_SLP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SWTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, per_ex_hard_fault.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[25]"></a>GPIO_SetInactive</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetInactive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_test
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[24]"></a>GPIO_SetActive</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_test
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[23]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 46 bytes, Stack size 36 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[4b]"></a>GPIO_ConfigurePinPower</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>GPIO_GetPinStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>GPIO_EnableIRQ</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[4d]"></a>GPIO_GetIRQInputLevel</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>GPIO_SetIRQInputLevel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[2b]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_RegisterCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>GPIOn_Handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[19]"></a>GPIO0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO1_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO2_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO3_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO4_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>uart2_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[31]"></a>uart2_flow_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_off
</UL>

<P><STRONG><a name="[2f]"></a>uart2_flow_off</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_on
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_is_rx_fifo_empty
</UL>

<P><STRONG><a name="[37]"></a>uart2_finish_transfers</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[4f]"></a>uart2_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>uart2_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thr_empty_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[13]"></a>UART2_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_Handler &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_thr_empty_isr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rec_error_isr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rec_data_avail_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>printf_byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
</UL>

<P><STRONG><a name="[38]"></a>printf_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, common_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_finish_transfers
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_test
</UL>

<P><STRONG><a name="[3a]"></a>print_hword</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[3b]"></a>print_word</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[3c]"></a>reverse</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[3d]"></a>itoa</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, common_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>

<P><STRONG><a name="[50]"></a>printf_byte_dec</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common_uart.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>blinky_test</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blinky_test &rArr; printf_string &rArr; uart2_write &rArr; uart2_thr_empty_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>system_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main &rArr; periph_init &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinky_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[41]"></a>periph_init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, user_periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = periph_init &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[39]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[55]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[56]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[28]"></a>gpioshift16</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetIRQInputLevel
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
</UL>

<P><STRONG><a name="[29]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
</UL>

<P><STRONG><a name="[35]"></a>uart2_rec_data_avail_isr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_rec_data_avail_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[34]"></a>uart2_rec_error_isr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_rec_error_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[33]"></a>uart2_thr_empty_isr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_thr_empty_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
</UL>

<P><STRONG><a name="[30]"></a>uart2_is_rx_fifo_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_flow_off
</UL>

<P><STRONG><a name="[2e]"></a>NVIC_SetPriority</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
